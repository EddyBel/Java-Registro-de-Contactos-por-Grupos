/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.basesdedatospproyecto;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ben_9
 */
public class Interfaz extends javax.swing.JFrame {

    MYSQL db = new MYSQL();

    // VARIABLES
    String dataNombres;
    String dataApellidoPaterno;
    String dataApellidoMaterno;
    String dataNumeroTelefono;
    String dataGrupo;
    Integer dataIDContacto;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        limpiaLaTabla();
        actualizarTablaConBD();
        obtenerElIDConClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        filtrarID = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        formNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        FiltrarNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        formTelefono = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        formApellidoPaterno = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        formApellidoMaterno = new javax.swing.JTextField();
        btnAgregarContacto = new javax.swing.JButton();
        btnBuscarPorNombre = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        FiltrarIDContecto = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        btnActualizarContacto = new javax.swing.JButton();
        btnEliminarContacto = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        btnBuscarPorGrupo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        contadorTotal = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        contadorFamilia = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        contadorEscuela = new javax.swing.JLabel();
        contadorAmigos = new javax.swing.JLabel();
        formGrupo = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        contadorOtros = new javax.swing.JLabel();
        filtrarGrupo = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        filtrarID.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registro de Contactos");

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Formulario");

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Nombre (s)");

        formNombre.setBackground(new java.awt.Color(255, 255, 255));
        formNombre.setForeground(new java.awt.Color(51, 51, 51));
        formNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formNombreActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Filtrar");

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Filtrar por nombre");

        FiltrarNombre.setBackground(new java.awt.Color(255, 255, 255));
        FiltrarNombre.setForeground(new java.awt.Color(51, 51, 51));

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Apellido Paterno");

        formTelefono.setBackground(new java.awt.Color(255, 255, 255));
        formTelefono.setForeground(new java.awt.Color(51, 51, 51));

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Apellido Materno");

        formApellidoPaterno.setBackground(new java.awt.Color(255, 255, 255));
        formApellidoPaterno.setForeground(new java.awt.Color(51, 51, 51));
        formApellidoPaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formApellidoPaternoActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Numero Telefonico");

        formApellidoMaterno.setBackground(new java.awt.Color(255, 255, 255));
        formApellidoMaterno.setForeground(new java.awt.Color(51, 51, 51));

        btnAgregarContacto.setText("Agregar Contacto");
        btnAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarContactoActionPerformed(evt);
            }
        });

        btnBuscarPorNombre.setText("Buscar");
        btnBuscarPorNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorNombreActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("ID de contacto");

        FiltrarIDContecto.setBackground(new java.awt.Color(255, 255, 255));
        FiltrarIDContecto.setForeground(new java.awt.Color(51, 51, 51));

        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btnActualizarContacto.setText("Actualizar Contacto");
        btnActualizarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarContactoActionPerformed(evt);
            }
        });

        btnEliminarContacto.setText("Eliminar Contacto");
        btnEliminarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarContactoActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(204, 204, 204));
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Grupo (Familia, Amigos Escuela)");

        btnBuscarPorGrupo.setText("Buscar");
        btnBuscarPorGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorGrupoActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "A Paterno", "A Materno", "Telefono", "Grupo"
            }
        ));
        jScrollPane2.setViewportView(Tabla);

        jLabel11.setBackground(new java.awt.Color(204, 204, 204));
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Contactos");

        contadorTotal.setBackground(new java.awt.Color(204, 204, 204));
        contadorTotal.setForeground(new java.awt.Color(51, 51, 51));
        contadorTotal.setText("0");

        jLabel13.setBackground(new java.awt.Color(204, 204, 204));
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("C. Familia");

        contadorFamilia.setBackground(new java.awt.Color(204, 204, 204));
        contadorFamilia.setForeground(new java.awt.Color(51, 51, 51));
        contadorFamilia.setText("0");

        jLabel15.setBackground(new java.awt.Color(204, 204, 204));
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("Grupo");

        jLabel16.setBackground(new java.awt.Color(204, 204, 204));
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("ID Contacto");

        jLabel17.setBackground(new java.awt.Color(204, 204, 204));
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("C. Escuela");

        jLabel18.setBackground(new java.awt.Color(204, 204, 204));
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("C. Amigos");

        contadorEscuela.setBackground(new java.awt.Color(204, 204, 204));
        contadorEscuela.setForeground(new java.awt.Color(51, 51, 51));
        contadorEscuela.setText("0");

        contadorAmigos.setBackground(new java.awt.Color(204, 204, 204));
        contadorAmigos.setForeground(new java.awt.Color(51, 51, 51));
        contadorAmigos.setText("0");

        formGrupo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Familia", "Amigos", "Escuela", "Otros" }));

        jLabel21.setBackground(new java.awt.Color(204, 204, 204));
        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(51, 51, 51));
        jLabel21.setText("Rangel Serrano Eduardo Antonio");

        jLabel22.setBackground(new java.awt.Color(204, 204, 204));
        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(51, 51, 51));
        jLabel22.setText("24LF131");

        jLabel19.setBackground(new java.awt.Color(204, 204, 204));
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Otros");

        contadorOtros.setBackground(new java.awt.Color(204, 204, 204));
        contadorOtros.setForeground(new java.awt.Color(51, 51, 51));
        contadorOtros.setText("0");

        filtrarGrupo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Familia", "Amigos", "Escuela", "Otros", "Todos" }));

        javax.swing.GroupLayout filtrarIDLayout = new javax.swing.GroupLayout(filtrarID);
        filtrarID.setLayout(filtrarIDLayout);
        filtrarIDLayout.setHorizontalGroup(
            filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrarIDLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filtrarIDLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contadorTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contadorFamilia)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contadorAmigos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contadorEscuela)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contadorOtros))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(filtrarIDLayout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addGap(30, 30, 30)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22))
                        .addGroup(filtrarIDLayout.createSequentialGroup()
                            .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addGroup(filtrarIDLayout.createSequentialGroup()
                                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel15))
                                        .addGap(18, 18, 18)
                                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(formApellidoMaterno)
                                            .addComponent(formTelefono)
                                            .addComponent(formApellidoPaterno)
                                            .addComponent(formNombre)
                                            .addComponent(formGrupo, 0, 155, Short.MAX_VALUE)))
                                    .addComponent(btnActualizarContacto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEliminarContacto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnAgregarContacto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(31, 31, 31)
                            .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(FiltrarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnBuscarPorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(FiltrarIDContecto, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)
                                .addComponent(btnBuscarPorGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16)
                                .addComponent(filtrarGrupo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filtrarIDLayout.setVerticalGroup(
            filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrarIDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filtrarIDLayout.createSequentialGroup()
                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(formNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formApellidoPaterno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filtrarIDLayout.createSequentialGroup()
                                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(formApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(formTelefono)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(filtrarIDLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FiltrarIDContecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(filtrarIDLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(5, 5, 5)
                        .addComponent(FiltrarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarPorNombre)
                        .addGap(32, 32, 32)))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(filtrarIDLayout.createSequentialGroup()
                        .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(formGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarContacto))
                    .addGroup(filtrarIDLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizarContacto)
                    .addComponent(filtrarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarContacto)
                    .addComponent(btnBuscarPorGrupo))
                .addGap(18, 18, 18)
                .addGroup(filtrarIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(contadorTotal)
                    .addComponent(contadorFamilia)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(contadorEscuela)
                    .addComponent(contadorAmigos)
                    .addComponent(jLabel19)
                    .addComponent(contadorOtros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtrarID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtrarID, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formApellidoPaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formApellidoPaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formApellidoPaternoActionPerformed

    private void formNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formNombreActionPerformed

    /**
     * Maneja la acción del botón para agregar un nuevo contacto.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón de agregar
     * un nuevo contacto. Primero obtiene los datos ingresados en el formulario,
     * luego determina el ID del grupo basado en el nombre del grupo
     * seleccionado. Después intenta insertar los valores del nuevo contacto en
     * la base de datos a través de un método en la clase `db`. Si la inserción
     * es exitosa, actualiza la tabla con los datos más recientes y limpia los
     * campos del formulario. Si ocurre algún error durante la inserción,
     * muestra un mensaje de error en la consola.
     */
    private void btnAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarContactoActionPerformed
        // TODO add your handling code here:

        try {
            // Obtener los datos del formulario
            obtenerDatos();
            // Obtener el ID del grupo según el nombre del grupo seleccionado
            int idGrupo = obtenerIdGrupo(this.dataGrupo);

            try {
                // Insertar los datos del nuevo contacto en la base de datos
                db.insertarValores(this.dataNombres, this.dataApellidoPaterno, this.dataApellidoMaterno, this.dataNumeroTelefono, idGrupo);
                // Actualizar la tabla con los datos más recientes
                actualizarTablaConBD();
                // Limpiar los campos del formulario
                limpiarEntradas();
            } catch (SQLException ex) {
                // Si ocurre un error al agregar el contacto, mostrar el error en consola
                System.out.println("Error al agregar un dato");
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            // Si ocurre un error al obtener los datos, mostrar el error en consola
            System.out.println("Error al agregar un usuario a la base de datos");
        }

    }//GEN-LAST:event_btnAgregarContactoActionPerformed

    /**
     * Maneja la acción del botón para actualizar un contacto.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón de
     * actualizar un contacto. Verifica si se ha seleccionado un contacto válido
     * (basado en el ID del contacto) y, si es así, obtiene los datos del
     * formulario, actualiza la información del contacto en la base de datos y
     * luego actualiza la tabla con los registros más recientes. Después de la
     * actualización, limpia los campos de entrada. Si ocurre algún error
     * durante el proceso de actualización, muestra un mensaje de error en la
     * consola.
     */
    private void btnActualizarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarContactoActionPerformed
        // TODO add your handling code here:

        try {
            // Verificar si se ha seleccionado un contacto válido
            if (this.dataIDContacto != null) {
                obtenerDatos(); // Obtener los datos del formulario
                int indexGrupo = obtenerIdGrupo(this.dataGrupo); // Obtener el ID del grupo basado en el nombre del grupo
                // Actualizar el contacto en la base de datos
                db.actualizarContacto(this.dataIDContacto, this.dataNombres, this.dataApellidoPaterno, this.dataApellidoMaterno, this.dataNumeroTelefono, indexGrupo);
                actualizarTablaConBD(); // Actualizar la tabla con los datos más recientes
                limpiarEntradas(); // Limpiar los campos de entrada
            }
        } catch (Exception e) {
            System.out.println("Error al actualizar el registro"); // Mostrar mensaje de error si falla la actualización
        }

    }//GEN-LAST:event_btnActualizarContactoActionPerformed

    /**
     * Maneja la acción del botón para eliminar un contacto.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón de
     * eliminar contacto. Verifica si se ha seleccionado un contacto válido
     * (basado en el ID del contacto) y, si es así, elimina ese contacto de la
     * base de datos. Luego, actualiza la tabla con los registros más recientes
     * y limpia los campos de entrada. Si ocurre algún error durante la
     * eliminación, muestra un mensaje de error en la consola.
     */
    private void btnEliminarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarContactoActionPerformed
        // TODO add your handling code here:
        try {
            // Verificar si se ha seleccionado un contacto válido
            if (this.dataIDContacto != null) {
                db.eliminarContacto(this.dataIDContacto); // Eliminar el contacto de la base de datos
                actualizarTablaConBD(); // Actualizar la tabla con los datos más recientes
                limpiarEntradas(); // Limpiar los campos de entrada
            }
        } catch (Exception e) {
            System.out.println("No se logró eliminar el usuario"); // Mostrar mensaje de error si falla la eliminación
        }
    }//GEN-LAST:event_btnEliminarContactoActionPerformed

    /**
     * Maneja la acción del botón para buscar contactos similares por nombre.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón de
     * búsqueda por nombre. Recupera el valor ingresado en el campo de texto
     * `FiltrarNombre`, y busca contactos similares en la base de datos que
     * coincidan con el nombre proporcionado. Si se encuentran contactos, los
     * agrega a la tabla. Si no se encuentran resultados o si el campo está
     * vacío, se limpia la tabla. En caso de error, se vuelve a actualizar la
     * tabla con todos los registros.
     */
    private void btnBuscarPorNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorNombreActionPerformed
        // TODO add your handling code here:

        try {
            String nombre = this.FiltrarNombre.getText(); // Obtener el nombre ingresado por el usuario

            if (nombre != null && !nombre.isEmpty()) {
                // Verificar que el nombre no sea nulo o vacío
                List<String[]> contactos = db.obtenerContactosSimilaresPorNombre(nombre); // Buscar contactos similares por nombre

                if (contactos == null || contactos.isEmpty()) {
                    limpiaLaTabla(); // Limpiar la tabla si no se encuentran resultados
                } else { // Si se encuentran contactos
                    limpiaLaTabla(); // Limpiar la tabla actual
                    for (String[] persona : contactos) { // Iterar sobre cada contacto encontrado
                        String nombreGrupo = db.obtenerNombreGrupo(Integer.parseInt(persona[5])); // Obtener el nombre del grupo
                        agregarUnRegistroEnTabla(persona[0], persona[1], persona[2], persona[3], persona[4], nombreGrupo); // Agregar cada persona como una fila en la tabla
                    }
                    actualizarNumeroRegistros(); // Actualizar el número de registros en la interfaz
                }
            } else {
                actualizarTablaConBD();
            }
        } catch (Exception e) {
            actualizarTablaConBD(); // Si ocurre algún error, actualizar la tabla con todos los contactos
        }
    }//GEN-LAST:event_btnBuscarPorNombreActionPerformed

    /**
     * Maneja la acción del botón para buscar contactos similares por ID.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón
     * correspondiente. Recupera el valor ingresado en el campo de texto
     * `FiltrarIDContecto`, interpreta el valor como un ID de contacto y busca
     * contactos similares en la base de datos. Si se encuentran contactos
     * similares, los agrega a la tabla. Si no se encuentran contactos o si hay
     * un error, la tabla se limpia o se actualiza con todos los registros.
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        try {
            String idContacto = this.FiltrarIDContecto.getText(); // Obtener el ID de contacto ingresado por el usuario
            Integer id = Integer.parseInt(idContacto); // Convertir el valor ingresado a un número entero
            List<String[]> contactos = db.obtenerContactosSimilaresPorId(id); // Buscar contactos similares por ID

            if (contactos == null || contactos.isEmpty()) { // Si no se encuentran contactos, limpiar la tabla
                limpiaLaTabla();
            } else {
                limpiaLaTabla(); // Limpiar la tabla actual
                for (String[] persona : contactos) { // Iterar sobre cada registro de persona
                    String nombreGrupo = db.obtenerNombreGrupo(Integer.parseInt(persona[5])); // Obtener nombre del grupo
                    agregarUnRegistroEnTabla(persona[0], persona[1], persona[2], persona[3], persona[4], nombreGrupo); // Agregar cada persona como una fila en la tabla
                }
                actualizarNumeroRegistros(); // Actualizar el número de registros en la interfaz
            }
        } catch (Exception e) {
            actualizarTablaConBD(); // Si ocurre algún error, actualizar la tabla con todos los contactos
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Maneja la acción del botón "Buscar por Grupo". Filtra y actualiza la
     * tabla de contactos según el grupo seleccionado en el JComboBox
     * `filtrarGrupo`.
     *
     * Este método se ejecuta cuando el usuario hace clic en el botón "Buscar
     * por Grupo". Obtiene el valor seleccionado en el combo `filtrarGrupo` y,
     * dependiendo de la opción seleccionada, ya sea "Todos" o un grupo
     * específico, actualiza la tabla de contactos con los datos
     * correspondientes. Si se selecciona un grupo específico, se recuperan los
     * contactos asociados a ese grupo de la base de datos y se muestran en la
     * tabla. Si no hay contactos, se limpia la tabla.
     */
    private void btnBuscarPorGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorGrupoActionPerformed
        // TODO add your handling code here:

        try {
            String grupo = this.filtrarGrupo.getSelectedItem().toString(); // Obtener el grupo seleccionado
            if ("Todos".equals(grupo)) {  // Si se selecciona "Todos", mostrar todos los contactos
                actualizarTablaConBD(); // Actualizar la tabla con todos los contactos
            } else {
                Integer idGrupo = obtenerIdGrupo(grupo);  // Obtener el ID del grupo seleccionado
                List<String[]> contactos = db.obtenerContactosPorIdGrupo(idGrupo); // Obtener los contactos por grupo

                if (contactos == null || contactos.isEmpty()) { // Si no hay contactos, limpiar la tabla
                    limpiaLaTabla();
                } else {
                    limpiaLaTabla(); // Limpiar la tabla actual
                    for (String[] persona : contactos) { // Iterar sobre cada registro de persona
                        String nombreGrupo = db.obtenerNombreGrupo(Integer.parseInt(persona[5])); // Obtener nombre del grupo
                        agregarUnRegistroEnTabla(persona[0], persona[1], persona[2], persona[3], persona[4], nombreGrupo); // Agregar cada persona como una fila en la tabla
                    }
                    actualizarNumeroRegistros(); // Actualizar el número de registros en la interfaz
                }
            }
        } catch (Exception e) {
            actualizarTablaConBD(); // Si ocurre algún error, actualizar la tabla con todos los contactos
        }

    }//GEN-LAST:event_btnBuscarPorGrupoActionPerformed

    // DEFINE LAS FUNCIONES AUXILIARES PARA LA INTERFAZ
    /**
     * Obtiene los datos de los campos del formulario y los almacena en
     * variables de instancia.
     *
     * Este método recoge los valores ingresados por el usuario en los campos
     * del formulario (nombre, apellido paterno, apellido materno, teléfono y
     * grupo) y los asigna a las variables de instancia correspondientes. Este
     * proceso es útil para almacenar los datos antes de realizar alguna acción,
     * como insertarlos en la base de datos o utilizarlos en otros procesos de
     * la aplicación.
     */
    private void obtenerDatos() {

        this.dataNombres = this.formNombre.getText();
        this.dataApellidoPaterno = this.formApellidoPaterno.getText();
        this.dataApellidoMaterno = this.formApellidoMaterno.getText();
        this.dataNumeroTelefono = this.formTelefono.getText();
        this.dataGrupo = this.formGrupo.getSelectedItem().toString();

    }

    /**
     * Esta función limpia por completo la tabla de datos (JTable), eliminando
     * todas sus filas. Se obtiene el modelo de la tabla, que es responsable de
     * gestionar los datos de la tabla, y luego se eliminan todas las filas de
     * la misma.
     */
    private void limpiaLaTabla() {
        // Obtener el modelo de la tabla, el cual es responsable de almacenar y manipular los datos de la JTable
        DefaultTableModel modeloTabla = (DefaultTableModel) this.Tabla.getModel();

        // Obtener el número actual de filas en el modelo de la tabla
        int rowCount = modeloTabla.getRowCount();

        // Eliminar filas de abajo hacia arriba para evitar errores de indexación durante el proceso de eliminación
        for (int i = rowCount - 1; i >= 0; i--) {
            // Eliminar la fila en la posición 'i' del modelo de la tabla
            modeloTabla.removeRow(i);
        }
    }

    /**
     * Actualiza el número total de contactos y el número de contactos por
     * grupo.
     *
     * Este método obtiene la cantidad total de contactos y la cantidad de
     * contactos pertenecientes a los diferentes grupos ("Familia", "Amigos",
     * "Escuela", "Otros") desde la base de datos. Luego, actualiza los
     * contadores en la interfaz gráfica con los valores obtenidos para cada
     * categoría.
     */
    private void actualizarNumeroRegistros() {

        int numContactos = db.contarElementosContactos();
        int numFamilia = db.contarElementosContactosPorGrupo(1);
        int numAmigos = db.contarElementosContactosPorGrupo(2);
        int numEscuela = db.contarElementosContactosPorGrupo(3);
        int numOtros = db.contarElementosContactosPorGrupo(4);

        this.contadorTotal.setText(String.valueOf(numContactos));
        this.contadorFamilia.setText(String.valueOf(numFamilia));
        this.contadorAmigos.setText(String.valueOf(numAmigos));
        this.contadorEscuela.setText(String.valueOf(numEscuela));
        this.contadorOtros.setText(String.valueOf(numOtros));

    }

    /**
     * Esta función agrega un nuevo registro a la tabla JTable. Los datos del
     * registro son pasados como parámetros y se añaden como una nueva fila en
     * el modelo de la tabla (DefaultTableModel).
     *
     * @param nombre Nombre de la persona.
     * @param apellidoPaterno Apellido paterno de la persona.
     * @param apellidoMaterno Apellido materno de la persona.
     * @param fechaNacimiento Fecha de nacimiento de la persona en formato
     * "yyyy-MM-dd".
     * @param entidad Entidad federativa de la persona.
     * @param genero Género de la persona (por ejemplo: "H" para masculino, "M"
     * para femenino).
     * @param curp CURP de la persona.
     */
    private void agregarUnRegistroEnTabla(String id, String nombre, String apellidoPaterno, String apellidoMaterno, String telefono, String idGrupo) {
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel(); // Obtener el modelo de la tabla (DefaultTableModel)
        model.addRow(new Object[]{id, nombre, apellidoPaterno, apellidoMaterno, telefono, idGrupo}); // Agregar una nueva fila con los datos proporcionados
    }

    /**
     * Actualiza el contenido de la tabla JTable con los datos más recientes
     * obtenidos desde la base de datos.
     *
     * Este método realiza una actualización completa de la tabla, primero
     * limpiando la tabla actual y luego recuperando los registros de personas
     * almacenados en la base de datos. Para cada registro, se consulta el
     * nombre del grupo de la persona y se agrega una nueva fila en la tabla con
     * la información de esa persona.
     *
     * El flujo de ejecución es el siguiente: 1. Se obtiene la lista de
     * contactos (personas) desde la base de datos a través del método
     * `db.obtenerContactos()`. 2. Se limpia la tabla actual llamando a
     * `limpiaLaTabla()`. 3. Se itera sobre cada persona recuperada y se
     * consulta el nombre del grupo de la persona a través de
     * `db.obtenerNombreGrupo()`. 4. Cada registro de persona se agrega a la
     * tabla utilizando el método `agregarUnRegistroEnTabla()`. 5. Finalmente,
     * se actualiza el número de registros en la tabla llamando a
     * `actualizarNumeroRegistros()`.
     */
    private void actualizarTablaConBD() {
        List<String[]> personas = db.obtenerContactos(); // Obtener la lista de personas desde la base de datos
        limpiaLaTabla(); // Limpiar la tabla actual
        for (String[] persona : personas) { // Iterar sobre cada registro de persona
            String nombreGrupo = db.obtenerNombreGrupo(Integer.parseInt(persona[5]));
            agregarUnRegistroEnTabla(persona[0], persona[1], persona[2], persona[3], persona[4], nombreGrupo); // Agregar cada persona como una fila en la tabla
        }
        actualizarNumeroRegistros();
    }

    /**
     * Asocia un grupo de contacto (representado por su nombre) a un
     * identificador numérico.
     *
     * Este método toma el nombre de un grupo de contacto, representado por la
     * variable `dataGrupo`, y devuelve un valor numérico correspondiente a
     * dicho grupo. Los grupos predefinidos son: - "Familia" -> 1 - "Amigos" ->
     * 2 - "Escuela" -> 3 En caso de que el nombre del grupo no coincida con
     * alguno de los anteriores, se devuelve el valor 4 como identificador por
     * defecto.
     *
     * @return El identificador numérico correspondiente al grupo de contacto.
     * Retorna 1 para "Familia", 2 para "Amigos", 3 para "Escuela", y 4 para
     * otros grupos.
     */
    public int obtenerIdGrupo(String dataGrupo) {
        switch (dataGrupo) {

            case "Familia":
                return 1;
            case "Amigos":
                return 2;
            case "Escuela":
                return 3;
            default:
                return 4;

        }
    }

    /**
     * Limpia todos los campos de entrada en la interfaz de usuario y restablece
     * las variables de estado asociadas a los datos del contacto.
     *
     * Este método establece los valores de los campos de texto `formNombre`,
     * `formApellidoPaterno`, `formApellidoMaterno`, y `formTelefono` a cadenas
     * vacías, y restablece el índice seleccionado de `formGrupo` al valor
     * predeterminado (índice 0). Además, limpia las variables de estado
     * `dataNombres`, `dataApellidoPaterno`, `dataApellidoMaterno`,
     * `dataNumeroTelefono`, `dataIDContacto` y `dataGrupo`, asignándoles el
     * valor `null`.
     *
     * Este método se utiliza para restablecer la interfaz y las variables de
     * estado, generalmente después de realizar una operación como la creación o
     * actualización de un contacto.
     */
    private void limpiarEntradas() {

        // Limpiar los campos de texto de la interfaz
        this.formNombre.setText("");
        this.formApellidoPaterno.setText("");
        this.formApellidoMaterno.setText("");
        this.formGrupo.setSelectedIndex(0);
        this.formTelefono.setText("");

        // Restablecer las variables de estado asociadas a los datos del contacto
        this.dataNombres = null;
        this.dataApellidoPaterno = null;
        this.dataApellidoMaterno = null;
        this.dataNumeroTelefono = null;
        this.dataIDContacto = null;
        this.dataGrupo = null;
    }

    /**
     * Agrega un `ListSelectionListener` a la tabla `JTable`. El listener se
     * activa cuando el usuario hace clic sobre una fila de la tabla, y obtiene
     * el valor de la columna 0 (que corresponde al ID del contacto) de la fila
     * seleccionada. Este valor se utiliza para obtener los detalles del
     * contacto desde la base de datos y los muestra en los campos de texto
     * correspondientes en la interfaz.
     *
     * El valor obtenido se utiliza para completar los campos `formNombre`,
     * `formApellidoPaterno`, `formApellidoMaterno`, `formTelefono` y
     * `formGrupo`. Además, actualiza la variable de estado `dataIDContacto` con
     * el ID del contacto seleccionado.
     *
     * Si no se selecciona ninguna fila, se muestra un mensaje en consola.
     */
    private void obtenerElIDConClick() {
        // Agregar un listener para el modelo de selección de la tabla, que se ejecuta cuando se selecciona una fila
        this.Tabla.getSelectionModel().addListSelectionListener(e -> {
            // Verificar si el cambio de selección no es un ajuste visual temporal
            if (!e.getValueIsAdjusting()) {
                // Obtener la fila que ha sido seleccionada
                int row = this.Tabla.getSelectedRow();  // La fila seleccionada

                // Verificar si la fila seleccionada es válida (no es -1, que indica que no hay fila seleccionada)
                if (row != -1) {
                    int column = 0;  // Indicar la columna 6 que contiene el valor de la CURP
                    // Recuperar el valor de la celda correspondiente a la CURP en la fila seleccionada
                    String valor = this.Tabla.getValueAt(row, column).toString();

                    if (valor != null) {
                        String[] persona = db.obtenerContactoPorId(Integer.parseInt(valor));
                        this.dataIDContacto = Integer.parseInt(persona[0]);
                        this.formNombre.setText(persona[1]);
                        this.formApellidoPaterno.setText(persona[2]);
                        this.formApellidoMaterno.setText(persona[3]);
                        this.formTelefono.setText(persona[4]);
                        String nombreGrupo = db.obtenerNombreGrupo(Integer.parseInt(persona[5]));
                        this.formGrupo.setSelectedItem(nombreGrupo);
                    }

                    System.out.println("VALOR:: " + valor);
                } else {
                    // Si no hay una fila seleccionada, se puede mostrar un mensaje en consola o manejarlo de alguna forma
                    System.out.println("No se ha seleccionado ninguna fila.");
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FiltrarIDContecto;
    private javax.swing.JTextField FiltrarNombre;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnActualizarContacto;
    private javax.swing.JButton btnAgregarContacto;
    private javax.swing.JButton btnBuscarPorGrupo;
    private javax.swing.JButton btnBuscarPorNombre;
    private javax.swing.JButton btnEliminarContacto;
    private javax.swing.JLabel contadorAmigos;
    private javax.swing.JLabel contadorEscuela;
    private javax.swing.JLabel contadorFamilia;
    private javax.swing.JLabel contadorOtros;
    private javax.swing.JLabel contadorTotal;
    private javax.swing.JComboBox<String> filtrarGrupo;
    private javax.swing.JPanel filtrarID;
    private javax.swing.JTextField formApellidoMaterno;
    private javax.swing.JTextField formApellidoPaterno;
    private javax.swing.JComboBox<String> formGrupo;
    private javax.swing.JTextField formNombre;
    private javax.swing.JTextField formTelefono;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
